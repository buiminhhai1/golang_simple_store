// Code generated by sqlc. DO NOT EDIT.
// source: order_item.sql

package db

import (
	"context"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
  order_id,
  book_id,
  quantity,
  price_invoice
) VALUES (
  $1, $2, $3, $4
)
RETURNING order_id, book_id, quantity, price_invoice, created_at, updated_at
`

type CreateOrderItemParams struct {
	OrderID      int32 `json:"order_id"`
	BookID       int32 `json:"book_id"`
	Quantity     int32 `json:"quantity"`
	PriceInvoice int32 `json:"price_invoice"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.OrderID,
		arg.BookID,
		arg.Quantity,
		arg.PriceInvoice,
	)
	var i OrderItem
	err := row.Scan(
		&i.OrderID,
		&i.BookID,
		&i.Quantity,
		&i.PriceInvoice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items WHERE order_id = $1 AND book_id = $2
`

type DeleteOrderItemParams struct {
	OrderID int32 `json:"order_id"`
	BookID  int32 `json:"book_id"`
}

func (q *Queries) DeleteOrderItem(ctx context.Context, arg DeleteOrderItemParams) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItem, arg.OrderID, arg.BookID)
	return err
}

const getOrderItemByPrimaryKey = `-- name: GetOrderItemByPrimaryKey :one
SELECT order_id, book_id, quantity, price_invoice, created_at, updated_at FROM order_items
WHERE order_id = $1 AND book_id = $2
LIMIT 1
`

type GetOrderItemByPrimaryKeyParams struct {
	OrderID int32 `json:"order_id"`
	BookID  int32 `json:"book_id"`
}

func (q *Queries) GetOrderItemByPrimaryKey(ctx context.Context, arg GetOrderItemByPrimaryKeyParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, getOrderItemByPrimaryKey, arg.OrderID, arg.BookID)
	var i OrderItem
	err := row.Scan(
		&i.OrderID,
		&i.BookID,
		&i.Quantity,
		&i.PriceInvoice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderItemsByBookID = `-- name: GetOrderItemsByBookID :many
SELECT order_id, book_id, quantity, price_invoice, created_at, updated_at FROM order_items
WHERE book_id = $3 
LIMIT $1
OFFSET $2
`

type GetOrderItemsByBookIDParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	BookID int32 `json:"book_id"`
}

func (q *Queries) GetOrderItemsByBookID(ctx context.Context, arg GetOrderItemsByBookIDParams) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItemsByBookID, arg.Limit, arg.Offset, arg.BookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.OrderID,
			&i.BookID,
			&i.Quantity,
			&i.PriceInvoice,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderItemsByOrderID = `-- name: GetOrderItemsByOrderID :many
SELECT order_id, book_id, quantity, price_invoice, created_at, updated_at FROM order_items
WHERE order_id = $3
ORDER BY book_id
LIMIT $1
OFFSET $2
`

type GetOrderItemsByOrderIDParams struct {
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
	OrderID int32 `json:"order_id"`
}

func (q *Queries) GetOrderItemsByOrderID(ctx context.Context, arg GetOrderItemsByOrderIDParams) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItemsByOrderID, arg.Limit, arg.Offset, arg.OrderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.OrderID,
			&i.BookID,
			&i.Quantity,
			&i.PriceInvoice,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderPriceInvoice = `-- name: UpdateOrderPriceInvoice :one
UPDATE order_items
SET price_invoice = $3
WHERE order_id = $1 AND book_id = $2
RETURNING order_id, book_id, quantity, price_invoice, created_at, updated_at
`

type UpdateOrderPriceInvoiceParams struct {
	OrderID      int32 `json:"order_id"`
	BookID       int32 `json:"book_id"`
	PriceInvoice int32 `json:"price_invoice"`
}

func (q *Queries) UpdateOrderPriceInvoice(ctx context.Context, arg UpdateOrderPriceInvoiceParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, updateOrderPriceInvoice, arg.OrderID, arg.BookID, arg.PriceInvoice)
	var i OrderItem
	err := row.Scan(
		&i.OrderID,
		&i.BookID,
		&i.Quantity,
		&i.PriceInvoice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
