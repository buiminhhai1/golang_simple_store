// Code generated by sqlc. DO NOT EDIT.
// source: book.sql

package db

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
  name,
  price,
  quantity,
  book_category_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, price, quantity, book_category_id, created_at
`

type CreateBookParams struct {
	Name           string `json:"name"`
	Price          int32  `json:"price"`
	Quantity       int32  `json:"quantity"`
	BookCategoryID int32  `json:"book_category_id"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Name,
		arg.Price,
		arg.Quantity,
		arg.BookCategoryID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Quantity,
		&i.BookCategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBookById = `-- name: GetBookById :one
SELECT id, name, price, quantity, book_category_id, created_at FROM books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBookById(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookById, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Quantity,
		&i.BookCategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const getBooksByCategoryId = `-- name: GetBooksByCategoryId :many
SELECT id, name, price, quantity, book_category_id, created_at FROM books
WHERE book_category_id = $3
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetBooksByCategoryIdParams struct {
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
	BookCategoryID int32 `json:"book_category_id"`
}

func (q *Queries) GetBooksByCategoryId(ctx context.Context, arg GetBooksByCategoryIdParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByCategoryId, arg.Limit, arg.Offset, arg.BookCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Quantity,
			&i.BookCategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBooks = `-- name: ListBooks :many
SELECT id, name, price, quantity, book_category_id, created_at FROM books
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBooksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBooks(ctx context.Context, arg ListBooksParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Quantity,
			&i.BookCategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET name = $2, price = $3, quantity = $4, book_category_id = $5
WHERE id = $1
RETURNING id, name, price, quantity, book_category_id, created_at
`

type UpdateBookParams struct {
	ID             int32  `json:"id"`
	Name           string `json:"name"`
	Price          int32  `json:"price"`
	Quantity       int32  `json:"quantity"`
	BookCategoryID int32  `json:"book_category_id"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBook,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Quantity,
		arg.BookCategoryID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Quantity,
		&i.BookCategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const updateQuantityBook = `-- name: UpdateQuantityBook :one
UPDATE books
SET quantity = $2
WHERE id = $1
RETURNING id, name, price, quantity, book_category_id, created_at
`

type UpdateQuantityBookParams struct {
	ID       int32 `json:"id"`
	Quantity int32 `json:"quantity"`
}

func (q *Queries) UpdateQuantityBook(ctx context.Context, arg UpdateQuantityBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateQuantityBook, arg.ID, arg.Quantity)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Quantity,
		&i.BookCategoryID,
		&i.CreatedAt,
	)
	return i, err
}
